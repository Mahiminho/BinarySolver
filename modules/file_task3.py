class module_task3:
    def task3(num):
        print("Тема: 3. ЗАДАНІ ДЕСЯТКОВІ ЧИСЛА ПЕРЕТВОРИТИ У ДВІЙКОВІ, ВІСІМКОВІ ТА ШІСТНАДЦЯТКОВІ: (у дробових частинах чисел досягти точності до 1-го байта).")
        print("\nПОПЕРЕДЖЕННЯ: Увага! У квадратних дужках позначається система числення! Не переписуйте квадратних дужок, просто система числення пишеться меншими цифрами!")
        print("ПОЯСНЕННЯ: Щоб перевести ціле число з десяткової системи числення у n-ову, потрібно ділити його на n доти, доки воно не стане рівне 0. Дробову частину потрібно множити на n доти, в залежності від того, скільки знаків після коми нам потрібно.\n")
        nums = num.split(" ")
        a = nums[0]
        b = nums[1]



        # ДЛЯ ПЕРШОГО ЧИСЛА
        # ДЛЯ ПЕРЕВЕДЕННЯ В ДВІЙКОВУ СИСТЕМУ ЧИСЛЕННЯ
        print("1) Переведення першого числа з десяткової системи числення у двійкову:\n")
        a_divided = a.split(",") # розбиття першого числа з основою десять на дві частини: цілу (до коми) і дробову (після коми)
        a_before_coma = int(a_divided[0]) # створення цілого числа, з числа до коми
        a_after_coma = int(a_divided[1]) # створення цілого числа, з числа після коми

        for_user1 = [] # порожній масив де будуть числа ділені на 2, для виведення їх юзеру
        res1 = a_before_coma % 2 # знаходження по модулю останноьї цифри відповіді (тобто фінального двійкового числа до коми)
        res2 = a_before_coma // 2 # ділення без остачі (для наступного ділення по модулю)
        for_user1.append(a_before_coma) # додавання в масив числа
        full_res1 = [] # створення пустого масиву з відповіддю (перевернутою)
        full_res1.append(str(res1)) # додавання останньої цифри відповіді в масив
        while res2 >= 1: # повторення дій до кінця
            for_user1.append(res2)
            res1 = res2 % 2
            res2 = res2 // 2
            full_res1.append(str(res1))

        half_res = "0." + str(a_after_coma) # перетворення дробового числа після коми на строку
        half_res = float(half_res) # переведення його в НЕ цілочисельний формат

        for_user2 = [] # порожній масив де будуть числа множені на 2, для виведення їх юзеру
        for_user2.append(round(half_res, 3)) # заокруглення (до трьох знаків після коми) чисел, множених на 2 і додання їх в масив
        i = 0
        full_res2 = [] # створення масиву для відповіді
        res3 = half_res * 2 # виконання першої дії множення

        if res3 >= 1: # і перша перевірка (якщо після множення число більше рівне за один, то додаємо в масив 1, інакше нуль)
            full_res2.append('1')
            res3 -= 1
        else: # протилежний варіант першої перевірки
            full_res2.append('0')

        while i < 7: # продовження перевірок, заповнюючи масив одиницями і нулями
            for_user2.append(round(res3, 3))
            res3 = res3 * 2

            if res3 >= 1:
                full_res2.append('1')
                res3 -= 1
            else:
                full_res2.append('0')
            i += 1

        i = 0
        while i < len(for_user1): # створення виразів для користувача, які він записуватиме (з числом до коми)
            mid = "(" + str(full_res1[i]) + ")"
            print(str(for_user1[i]), ": 2 =", for_user1[i] // 2, mid)
            i += 1

        print("")

        i = 0
        while i < len(for_user2): # створення виразів для користувача, які він записуватиме (з числом після коми)
            res = for_user2[i] * 2

            if res >= 1:
                res -= 1
            else:
                pass

            mid = str(for_user2[i]) + " * 2 = " + str(round(res, 3)) + " (" + str(full_res2[i]) + ")"
            print(mid)
            i += 1

        print("")

        full_res1.reverse() # реверс масиву, щоб числа для відповіді були в правильному порядку
        full_res1 = ''.join(full_res1) # створення масива строк до коми
        full_res2 = ''.join(full_res2) # створення масива строк після коми
        full_res = full_res1 + "," + full_res2 # формування фінального числа результату

        final = a + "[10] = " + str(full_res) + "[2]" # формування фінальної строки з відповіддю переведення
        print(final)
        print("")





        # ДЛЯ ПЕРШОГО ЧИСЛА
        # ДЛЯ ПЕРЕВЕДЕННЯ В ВІСІМКОВУ СИСТЕМУ ЧИСЛЕННЯ
        print("2) Переведення першого числа з десяткової системи числення у вісімкову:\n")
        a_divided = a.split(",") # розбиття першого числа з основою десять на дві частини: цілу (до коми) і дробову (після коми)
        a_before_coma = int(a_divided[0]) # створення цілого числа, з числа до коми
        a_after_coma = int(a_divided[1]) # створення цілого числа, з числа після коми

        for_user1 = [] # порожній масив де будуть числа ділені на 8, для виведення їх юзеру
        res1 = a_before_coma % 8 # по модулю знаходження останню цифру відповіді (тобто фінального вісімкового числа до коми)
        res2 = a_before_coma // 8 # ділю без остачі (для наступного ділення по модулю)
        for_user1.append(a_before_coma) # додаю в масив число
        full_res1 = [] # створюю пустий масив з відповіддю (перевернутою)
        full_res1.append(str(res1)) # додаю останню цифру відповіді в масив
        while res2 >= 1: # повторюю дії до кінця
            for_user1.append(res2)
            res1 = res2 % 8
            res2 = res2 // 8
            full_res1.append(str(res1))

        half_res = "0." + str(a_after_coma) # роблю дробове число після коми строкою
        half_res = float(half_res) # переводжу його в НЕ цілочисельний формат

        for_user2 = [] # порожній масив де будуть числа множені на 8, для виведення їх юзеру
        for_user2.append(round(half_res, 3)) # заокруглення (до трьох знаків після коми) чисел, множених на 8 і додання їх в масив
        i = 0
        full_res2 = [] # створюю масив для відповіді
        res3 = half_res * 8 # виконую першу дію множення

        if res3 >= 1: # і першу перевірку: якщо число більше рівне за 1, то:
            res_half = str(res3) # переводжу його в строку
            res_half = res_half.split(".") # розбива по крапці на дві частини: до і після крапки
            first = int(res_half[0]) # першу частину (до крапки (тобто цілу)) переводжу в цілочисельний формат
            res3 -= first # віднімаю від основного так би мовити числа (яке множиться) цілу частину
            full_res2.append(str(first)) # додаю в масив строкою
        else: # протилежний варіант першої перевірки
            full_res2.append('0')

        while i < 7: # продовжую перевірки, заповнюючи масив числами
            for_user2.append(round(res3, 3))
            res3 = res3 * 8

            if res3 >= 1:
                res_half = str(res3)
                res_half = res_half.split(".")
                first = int(res_half[0])
                res3 -= first
                full_res2.append(str(first))
            else:
                full_res2.append('0')
            i += 1

        i = 0
        while i < len(for_user1): # створення виразів для користувача, які він записуватиме (з числом до коми)
            mid = "(" + str(full_res1[i]) + ")"
            print(str(for_user1[i]), ": 8 =", for_user1[i] // 8, mid)
            i += 1

        print("")

        i = 0
        while i < len(for_user2): # створення виразів для користувача, які він записуватиме (з числом після коми)
            res = for_user2[i] * 8

            if res >= 1:
                res_half = str(res)
                res_half = res_half.split(".")
                first = int(res_half[0])
                res -= first
            else:
                pass

            mid = str(for_user2[i]) + " * 8 = " + str(round(res, 3)) + " (" + str(full_res2[i]) + ")"
            print(mid)
            i += 1

        print("")

        full_res1.reverse() # перевертаю масив, щоб числа для відповіді були в правильному порядку
        full_res1 = ''.join(full_res1) # зробив з масива строку до коми
        full_res2 = ''.join(full_res2) # зробив з масива строку після коми
        full_res = full_res1 + "," + full_res2 # формую фінальне число результат

        final = a + "[10] = " + str(full_res) + "[8]" # формую фінальну строку з відповіддю переведення
        print(final)
        print("")





        # ДЛЯ ПЕРШОГО ЧИСЛА
        # ДЛЯ ПЕРЕВЕДЕННЯ В ШІСТНАДЦЯТКОВУ СИСТЕМУ ЧИСЛЕННЯ
        more10 = {10:"A", 11:"B", 12:"C", 13:"D", 14:"E", 15:"F"} # словник, де числа, більші за 10 в шістнадцятковій

        print("3) Переведення першого числа з десяткової системи числення у шістнадцяткову:\n")
        a_divided = a.split(",") # розбиваю перше число з основою десять на дві частини: цілу (до коми) і дробову (після коми)
        a_before_coma = int(a_divided[0]) # роблю ціле число, з числа до коми
        a_after_coma = int(a_divided[1]) # роблю ціле число з числа після коми

        for_user1 = [] # порожній масив де будуть числа ділені на 16, для виведення їх юзеру
        res1 = a_before_coma % 16 # по модулю знаходжу останню цифру відповіді (тобто фінального вісімкового числа до коми)
        res2 = a_before_coma // 16 # ділю без остачі (для наступного ділення по модулю)
        for_user1.append(a_before_coma) # додаю в масив число
        full_res1 = [] # створюю пустий масив з відповіддю (перевернутою)
        if res1 >= 10: # перевірка, якщо остача більша рівна за 10, то перетворюємо її в букву
            res1 = more10[res1]
        full_res1.append(str(res1)) # додаю останню цифру (чи букву) відповіді в масив
        while res2 >= 1: # повторюю дії до кінця
            for_user1.append(res2)
            res1 = res2 % 16
            res2 = res2 // 16
            if res1 >= 10:
                res1 = more10[res1]
            full_res1.append(str(res1))

        half_res = "0." + str(a_after_coma) # роблю дробове число після коми строкою
        half_res = float(half_res) # переводжу його в НЕ цілочисельний формат

        for_user2 = [] # порожній масив де будуть числа множені на 16, для виведення їх юзеру
        for_user2.append(round(half_res, 3)) # заокруглення (до трьох знаків після коми) чисел, множених на 16 і додання їх в масив
        i = 0
        full_res2 = [] # створюю масив для відповіді
        res3 = half_res * 16 # виконую першу дію множення

        if res3 >= 1: # і першу перевірку: якщо число більше рівне за 1, то:
            res_half = str(res3) # переводжу його в строку
            res_half = res_half.split(".") # розбива по крапці на дві частини: до і після крапки
            first = int(res_half[0]) # першу частину (до крапки (тобто цілу)) переводжу в цілочисельний формат
            res3 -= first # віднімаю від основного, так би мовити числа (яке множиться), цілу частину
            if first >= 10: # перевірка чи остача більша рівна за 10, тоді заміняємо її буквою
                first = more10[first]
            full_res2.append(str(first)) # додаю в масив строкою
        else: # протилежний варіант першої перевірки
            full_res2.append('0')

        while i < 7: # продовжую перевірки, заповнюючи масив числами
            for_user2.append(round(res3, 3))
            res3 = res3 * 16

            if res3 >= 1:
                res_half = str(res3)
                res_half = res_half.split(".")
                first = int(res_half[0])
                res3 -= first
                if first >= 10:
                    first = more10[first]
                full_res2.append(str(first))
            else:
                full_res2.append('0')
            i += 1

        i = 0
        while i < len(for_user1): # створення виразів для користувача, які він записуватиме (з числом до коми)
            mid = "(" + str(full_res1[i]) + ")"
            print(str(for_user1[i]), ": 16 =", for_user1[i] // 16, mid)
            i += 1

        print("")

        i = 0
        while i < len(for_user2): # створення виразів для користувача, які він записуватиме (з числом після коми)
            res = for_user2[i] * 16

            if res >= 1:
                res_half = str(res)
                res_half = res_half.split(".")
                first = int(res_half[0])
                res -= first
            else:
                pass

            mid = str(for_user2[i]) + " * 16 = " + str(round(res, 3)) + " (" + str(full_res2[i]) + ")"
            print(mid)
            i += 1

        print("")

        full_res1.reverse() # перевертаю масив, щоб числа для відповіді були в правильному порядку
        full_res1 = ''.join(full_res1) # зробив з масива строку до коми
        full_res2 = ''.join(full_res2) # зробив з масива строку після коми
        full_res = full_res1 + "," + full_res2 # формую фінальне число результат

        final = a + "[10] = " + str(full_res) + "[16]" # формую фінальну строку з відповіддю переведення
        print(final)
        print("")





        # ДЛЯ ДРУГОГО ЧИСЛА
        # ДЛЯ ПЕРЕВЕДЕННЯ В ДВІЙКОВУ СИСТЕМУ ЧИСЛЕННЯ
        print("4) Переведення другого числа з десяткової системи числення у двійкову:\n")
        b_divided = b.split(",") # розбиваю друге число з основою десять на дві частини: цілу (до коми) і дробову (після коми)
        b_before_coma = int(b_divided[0]) # роблю ціле число, з числа до коми
        b_after_coma = int(b_divided[1]) # роблю ціле число з числа після коми

        for_user1 = [] # порожній масив де будуть числа ділені на 2, для виведення їх юзеру
        res1 = b_before_coma % 2 # по модулю знаходжу останню цифру відповіді (тобто фінального двійкового числа до коми)
        res2 = b_before_coma // 2 # ділю без остачі (для наступного ділення по модулю)
        for_user1.append(b_before_coma) # додаю в масив число
        full_res1 = [] # створюю пустий масив з відповіддю (перевернутою)
        full_res1.append(str(res1)) # додаю останню цифру відповіді в масив
        while res2 >= 1: # повторюю дії до кінця
            for_user1.append(res2)
            res1 = res2 % 2
            res2 = res2 // 2
            full_res1.append(str(res1))

        half_res = "0." + str(b_after_coma) # роблю дробове число після коми строкою
        half_res = float(half_res) # переводжу його в НЕ цілочисельний формат

        for_user2 = [] # порожній масив де будуть числа множені на 2, для виведення їх юзеру
        for_user2.append(round(half_res, 3)) # заокруглення (до трьох знаків після коми) чисел, множених на 2 і додання їх в масив
        i = 0
        full_res2 = [] # створюю масив для відповіді
        res3 = half_res * 2 # виконую першу дію множення

        if res3 >= 1: # і першу перевірку (якщо після множення число більше рівне за один, то додаємо в масив 1, інакше нуль)
            full_res2.append('1')
            res3 -= 1
        else: # протилежний варіант першої перевірки
            full_res2.append('0')

        while i < 7: # продовжую перевірки, заповнюючи масив одиницями і нулями
            for_user2.append(round(res3, 3))
            res3 = res3 * 2

            if res3 >= 1:
                full_res2.append('1')
                res3 -= 1
            else:
                full_res2.append('0')
            i += 1

        i = 0
        while i < len(for_user1): # створення виразів для користувача, які він записуватиме (з числом до коми)
            mid = "(" + str(full_res1[i]) + ")"
            print(str(for_user1[i]), ": 2 =", for_user1[i] // 2, mid)
            i += 1

        print("")

        i = 0
        while i < len(for_user2): # створення виразів для користувача, які він записуватиме (з числом після коми)
            res = for_user2[i] * 2

            if res >= 1:
                res -= 1
            else:
                pass

            mid = str(for_user2[i]) + " * 2 = " + str(round(res, 3)) + " (" + str(full_res2[i]) + ")"
            print(mid)
            i += 1

        print("")

        full_res1.reverse() # перевертаю масив, щоб числа для відповіді були в правильному порядку
        full_res1 = ''.join(full_res1) # зробив з масива строку до коми
        full_res2 = ''.join(full_res2) # зробив з масива строку після коми
        full_res = full_res1 + "," + full_res2 # формую фінальне число результат

        final = b + "[10] = " + str(full_res) + "[2]" # формую фінальну строку з відповіддю переведення
        print(final)
        print("")





        # ДЛЯ ДРУГОГО ЧИСЛА
        # ДЛЯ ПЕРЕВЕДЕННЯ В ВІСІМКОВУ СИСТЕМУ ЧИСЛЕННЯ
        print("5) Переведення другого числа з десяткової системи числення у вісімкову:\n")
        b_divided = b.split(",") # розбиваю друге число з основою десять на дві частини: цілу (до коми) і дробову (після коми)
        b_before_coma = int(b_divided[0]) # роблю ціле число, з числа до коми
        b_after_coma = int(b_divided[1]) # роблю ціле число з числа після коми

        for_user1 = [] # порожній масив де будуть числа ділені на 8, для виведення їх юзеру
        res1 = b_before_coma % 8 # по модулю знаходжу останню цифру відповіді (тобто фінального вісімкового числа до коми)
        res2 = b_before_coma // 8 # ділю без остачі (для наступного ділення по модулю)
        for_user1.append(b_before_coma) # додаю в масив число
        full_res1 = [] # створюю пустий масив з відповіддю (перевернутою)
        full_res1.append(str(res1)) # додаю останню цифру відповіді в масив
        while res2 >= 1: # повторюю дії до кінця
            for_user1.append(res2)
            res1 = res2 % 8
            res2 = res2 // 8
            full_res1.append(str(res1))

        half_res = "0." + str(b_after_coma) # роблю дробове число після коми строкою
        half_res = float(half_res) # переводжу його в НЕ цілочисельний формат

        for_user2 = [] # порожній масив де будуть числа множені на 8, для виведення їх юзеру
        for_user2.append(round(half_res, 3)) # заокруглення (до трьох знаків після коми) чисел, множених на 8 і додання їх в масив
        i = 0
        full_res2 = [] # створюю масив для відповіді
        res3 = half_res * 8 # виконую першу дію множення

        if res3 >= 1: # і першу перевірку: якщо число більше рівне за 1, то:
            res_half = str(res3) # переводжу його в строку
            res_half = res_half.split(".") # розбиваю по крапці на дві частини: до і після крапки
            first = int(res_half[0]) # першу частину (до крапки (тобто цілу)) переводжу в цілочисельний формат
            res3 -= first # віднімаю від основного так би мовити числа (яке множиться) цілу частину
            full_res2.append(str(first)) # додаю в масив строкою
        else: # протилежний варіант першої перевірки
            full_res2.append('0')

        while i < 7: # продовжую перевірки, заповнюючи масив числами
            for_user2.append(round(res3, 3))
            res3 = res3 * 8

            if res3 >= 1:
                res_half = str(res3)
                res_half = res_half.split(".")
                first = int(res_half[0])
                res3 -= first
                full_res2.append(str(first))
            else:
                full_res2.append('0')
            i += 1

        i = 0
        while i < len(for_user1): # створення виразів для користувача, які він записуватиме (з числом до коми)
            mid = "(" + str(full_res1[i]) + ")"
            print(str(for_user1[i]), ": 8 =", for_user1[i] // 8, mid)
            i += 1

        print("")

        i = 0
        while i < len(for_user2): # створення виразів для користувача, які він записуватиме (з числом після коми)
            res = for_user2[i] * 8

            if res >= 1:
                res_half = str(res)
                res_half = res_half.split(".")
                first = int(res_half[0])
                res -= first
            else:
                pass

            mid = str(for_user2[i]) + " * 8 = " + str(round(res, 3)) + " (" + str(full_res2[i]) + ")"
            print(mid)
            i += 1

        print("")

        full_res1.reverse() # перевертаю масив, щоб числа для відповіді були в правильному порядку
        full_res1 = ''.join(full_res1) # зробив з масива строку до коми
        full_res2 = ''.join(full_res2) # зробив з масива строку після коми
        full_res = full_res1 + "," + full_res2 # формую фінальне число результат

        final = b + "[10] = " + str(full_res) + "[8]" # формую фінальну строку з відповіддю переведення
        print(final)
        print("")





        # ДЛЯ ДРУГОГО ЧИСЛА
        # ДЛЯ ПЕРЕВЕДЕННЯ В ШІСТНАДЦЯТКОВУ СИСТЕМУ ЧИСЛЕННЯ
        more10 = {10:"A", 11:"B", 12:"C", 13:"D", 14:"E", 15:"F"} # словник, де числа, більші за 10 в шістнадцятковій

        print("6) Переведення другого числа з десяткової системи числення у шістнадцяткову:\n")
        b_divided = b.split(",") # розбиваю друге число з основою десять на дві частини: цілу (до коми) і дробову (після коми)
        b_before_coma = int(b_divided[0]) # роблю ціле число, з числа до коми
        b_after_coma = int(b_divided[1]) # роблю ціле число з числа після коми

        for_user1 = [] # порожній масив де будуть числа ділені на 16, для виведення їх юзеру
        res1 = b_before_coma % 16 # по модулю знаходжу останню цифру відповіді (тобто фінального вісімкового числа до коми)
        res2 = b_before_coma // 16 # ділю без остачі (для наступного ділення по модулю)
        for_user1.append(b_before_coma) # додаю в масив число
        full_res1 = [] # створюю пустий масив з відповіддю (перевернутою)
        if res1 >= 10: # перевірка, якщо остача більша рівна за 10, то перетворюємо її в букву
            res1 = more10[res1]
        full_res1.append(str(res1)) # додаю останню цифру (чи букву) відповіді в масив
        while res2 >= 1: # повторюю дії до кінця
            for_user1.append(res2)
            res1 = res2 % 16
            res2 = res2 // 16
            if res1 >= 10:
                res1 = more10[res1]
            full_res1.append(str(res1))

        half_res = "0." + str(b_after_coma) # роблю дробове число після коми строкою
        half_res = float(half_res) # переводжу його в НЕ цілочисельний формат

        for_user2 = [] # порожній масив де будуть числа множені на 16, для виведення їх юзеру
        for_user2.append(round(half_res, 3)) # заокруглення (до трьох знаків після коми) чисел, множених на 16 і додання їх в масив
        i = 0
        full_res2 = [] # створюю масив для відповіді
        res3 = half_res * 16 # виконую першу дію множення

        if res3 >= 1: # і першу перевірку: якщо число більше рівне за 1, то:
            res_half = str(res3) # переводжу його в строку
            res_half = res_half.split(".") # розбиваю по крапці на дві частини: до і після крапки
            first = int(res_half[0]) # першу частину (до крапки (тобто цілу)) переводжу в цілочисельний формат
            res3 -= first # віднімаю від основного, так би мовити числа (яке множиться), цілу частину
            if first >= 10: # перевірка чи остача більша рівна за 10, тоді заміняємо її буквою
                first = more10[first]
            full_res2.append(str(first)) # додаю в масив строкою
        else: # протилежний варіант першої перевірки
            full_res2.append('0')

        while i < 7: # продовжую перевірки, заповнюючи масив числами
            for_user2.append(round(res3, 3))
            res3 = res3 * 16

            if res3 >= 1:
                res_half = str(res3)
                res_half = res_half.split(".")
                first = int(res_half[0])
                res3 -= first
                if first >= 10:
                    first = more10[first]
                full_res2.append(str(first))
            else:
                full_res2.append('0')
            i += 1

        i = 0
        while i < len(for_user1): # створення виразів для користувача, які він записуватиме (з числом до коми)
            mid = "(" + str(full_res1[i]) + ")"
            print(str(for_user1[i]), ": 16 =", for_user1[i] // 16, mid)
            i += 1

        print("")

        i = 0
        while i < len(for_user2): # створення виразів для користувача, які він записуватиме (з числом після коми)
            res = for_user2[i] * 16

            if res >= 1:
                res_half = str(res)
                res_half = res_half.split(".")
                first = int(res_half[0])
                res -= first
            else:
                pass

            mid = str(for_user2[i]) + " * 16 = " + str(round(res, 3)) + " (" + str(full_res2[i]) + ")"
            print(mid)
            i += 1

        print("")

        full_res1.reverse() # перевертаю масив, щоб числа для відповіді були в правильному порядку
        full_res1 = ''.join(full_res1) # зробив з масива строку до коми
        full_res2 = ''.join(full_res2) # зробив з масива строку після коми
        full_res = full_res1 + "," + full_res2 # формую фінальне число результат

        final = b + "[10] = " + str(full_res) + "[16]" # формую фінальну строку з відповіддю переведення
        print(final + "\n\n\n")